#include "vst_host.h"
#include "plugin_process_callback.h"     // ← без лишней точки!
#include "custom_audio_playhead.h"
#include "cpu_load.h"

using namespace juce;

//───────── локальные константы / цвета ────────────────────────────────
namespace {
    const Colour kPresetOff{ 0xFF404040 };
    const Colour kPresetOn{ 0xFF2A61FF };
    const Colour kLearnOff{ 0xFF0A2A0A };
    const Colour kLearnOn{ 0xFF24B324 };
}

//───────── Shared device manager ──────────────────────────────────────
AudioDeviceManager& VSTHostComponent::getDefaultAudioDeviceManager()
{
    static AudioDeviceManager mgr;
    static bool initialised = false;

    if (!initialised)
    {
        auto err = mgr.initialiseWithDefaultDevices(2, 2);
        jassert(err.isEmpty());
        initialised = true;
    }
    return mgr;
}

//───────── Constructors / Destructor ──────────────────────────────────
VSTHostComponent::VSTHostComponent()
    : deviceMgr(getDefaultAudioDeviceManager())
{
    initialiseComponent();
}

VSTHostComponent::VSTHostComponent(AudioDeviceManager& adm)
    : deviceMgr(adm)
{
    initialiseComponent();
}
//──────────────── setBpmDisplayLabel ───────────────────────
void VSTHostComponent::setBpmDisplayLabel(juce::Label* label) noexcept
{
    bpmLabel = label;
}
VSTHostComponent::~VSTHostComponent()
{
    unloadPlugin();
    resetBPM();
}

//───────── Public API ─────────────────────────────────────────────────
void VSTHostComponent::loadPlugin(const File& file,
    double sampleRate,
    int blockSize)
{
    unloadPlugin();                                   // safety first

    // 1. Найдём соответствующий формат
    formatMgr.addDefaultFormats();
    AudioPluginFormat* chosen = nullptr;
    OwnedArray<PluginDescription> descr;

    for (auto* fmt : formatMgr.getFormats())
    {
        fmt->findAllTypesForFile(descr, file.getFullPathName());
        if (descr.size() > 0) { chosen = fmt; break; }
    }
    if (!chosen)
    {
        AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon,
            "Error", "Unsupported plugin file");
        return;
    }

    // 2. Создаём экземпляр
   
    juce::String err;

    plugin = chosen->createInstanceFromDescription(*descr[0],
        sampleRate,
        blockSize,
        err);
    if (!plugin)
    {
        AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon,
            "Error", "Can't load plugin:\n" + err);
        return;
    }

    // 3. Настраиваем play-config и transport
    currentSampleRate = sampleRate;
    currentBlockSize = blockSize;
    plugin->setPlayConfigDetails(2, 2, sampleRate, blockSize);

    playHead = std::make_unique<CustomAudioPlayHead>();
    playHead->setBpm(120.0);
    playHead->setActive(true);
    plugin->setPlayHead(playHead.get());

    plugin->prepareToPlay(sampleRate, blockSize);

    // 4. AudioIODeviceCallback
    processCb = std::make_unique<PluginProcessCallback>(plugin.get(), sampleRate);
    processCb->setHostComponent(this);
    deviceMgr.addAudioCallback(processCb.get());

    // 5. GUI-editor
    pluginEditor = plugin->createEditor();
    if (pluginEditor) addAndMakeVisible(pluginEditor);

    // 6. Parameter listeners
    for (auto* p : plugin->getParameters()) p->addListener(this);

    // 7. Видимость кнопок и первый раскрас
    for (auto& b : presetBtn) b.setVisible(true);
    for (auto& b : learnBtn)  b.setVisible(true);

    activePreset = jlimit(0, kNumPresets - 1, plugin->getCurrentProgram());
    updatePresetColours();
    updateLearnColours();
    resized();
}
//──────────────── getAudioDeviceManagerRef ────────────────
juce::AudioDeviceManager& VSTHostComponent::getAudioDeviceManagerRef() noexcept
{
    return deviceMgr;           //  deviceMgr — наш приватный ref
}
//──────────────── setAudioSettings ─────────────────────────
void VSTHostComponent::setAudioSettings(double sampleRate, int blockSize) noexcept
{
    currentSampleRate = sampleRate;
    currentBlockSize = blockSize;
}

//──────────────── updateBPM ──────────────────────────────
void VSTHostComponent::updateBPM(double newBPM)
{
    if (playHead)
        playHead->setBpm(newBPM);

    if (bpmLabel)
    {
        bpmLabel->setText(juce::String(newBPM, 2) + " BPM",
            juce::dontSendNotification);
        bpmLabel->repaint();
    }
}

//──────────────── getPluginFiles ──────────────────────────
const juce::Array<juce::File>&
VSTHostComponent::getPluginFiles() const noexcept
{
    return pluginFiles;
}
//──────────────── getLastPluginCpuLoad ─────────────────────
double VSTHostComponent::getLastPluginCpuLoad() const noexcept
{
    return lastCpuLoad;
}

//──────────────── setPluginParameter ────────────────────────
void VSTHostComponent::setPluginParameter(int ccNumber, int ccValue) noexcept
{
    if (!plugin) return;

    auto& params = plugin->getParameters();
    if (ccNumber < 0 || ccNumber >= params.size()) return;

    float norm = juce::jlimit(0.f, 1.f, static_cast<float> (ccValue) / 127.f);
    plugin->setParameterNotifyingHost(ccNumber, norm);
}

void VSTHostComponent::unloadPlugin()
{
    // 1) отключаем callbacks, чтобы не словить «зомби»
    paramChangeCb = nullptr; presetCb = nullptr; learnCb = nullptr;

    if (processCb)
    {
        deviceMgr.removeAudioCallback(processCb.get());
        processCb.reset();
        updatePluginCpuLoad(0.0);
    }

    if (pluginEditor) { removeChildComponent(pluginEditor); delete pluginEditor; pluginEditor = nullptr; }

    if (plugin)
    {
        for (auto* p : plugin->getParameters()) p->removeListener(this);
        plugin->releaseResources();
        playHead.reset();
        plugin.reset();
    }

    for (auto& b : presetBtn) b.setVisible(false);
    for (auto& b : learnBtn)  b.setVisible(false);

    activePreset = 0;
    resetBPM();
}

//───────────────────────────────────────────────────────────────────────
//───────── Initialise GUI (called from ctor) ───────────────────────────
void VSTHostComponent::initialiseComponent()
{
    // preset buttons
    for (int i = 0; i < kNumPresets; ++i)
    {
        auto& b = presetBtn[i];
        b.setButtonText("PRESET " + String(i + 1));
        b.addListener(this);
        b.setVisible(false);
        addAndMakeVisible(b);
    }
    // learn buttons
    for (int i = 0; i < kNumLearn; ++i)
    {
        auto& b = learnBtn[i];
        b.setButtonText("LEARN " + String(i + 1));
        b.setClickingTogglesState(true);
        b.addListener(this);
        b.setVisible(false);
        addAndMakeVisible(b);
    }
}

//───────── Colours ─────────────────────────────────────────────────────
void VSTHostComponent::updatePresetColours()
{
    for (int i = 0; i < kNumPresets; ++i)
    {
        bool on = (i == activePreset);
        auto& b = presetBtn[i];
        b.setColour(TextButton::buttonColourId, on ? kPresetOn : kPresetOff);
        b.setColour(TextButton::textColourOffId, on ? Colours::white
            : Colours::black);
    }
}
void VSTHostComponent::updateLearnColours()
{
    for (auto& b : learnBtn)
    {
        b.setColour(TextButton::buttonColourId, kLearnOff);
        b.setColour(TextButton::buttonOnColourId, kLearnOn);
        b.setColour(TextButton::textColourOffId, Colours::white);
        b.setColour(TextButton::textColourOnId, Colours::black);
    }
}

//───────── Button handler ──────────────────────────────────────────────
void VSTHostComponent::buttonClicked(Button* btn)
{
    // LEARN
    for (int cc = 0; cc < kNumLearn; ++cc)
        if (btn == &learnBtn[cc])
        {
            bool on = learnBtn[cc].getToggleState();
            updateLearnColours();
            if (learnCb) learnCb(cc, on);
            return;
        }

    // PRESET
    for (int i = 0; i < kNumPresets; ++i)
        if (btn == &presetBtn[i])
        {
            if (plugin && activePreset != i)
            {
                activePreset = i;
                plugin->setCurrentProgram(i);
                updatePresetColours();
                if (presetCb) presetCb(i);
            }
            return;
        }
}

//───────── Parameter listener ──────────────────────────────────────────
void VSTHostComponent::parameterValueChanged(int idx, float norm)
{
    SafePointer<VSTHostComponent> safe(this);
    MessageManager::callAsync([safe, idx, norm]
        {
            if (safe && safe->paramChangeCb) safe->paramChangeCb(idx, norm);
        });
}

//───────── Layout / paint ──────────────────────────────────────────────
void VSTHostComponent::paint(Graphics& g) { g.fillAll(Colours::black); }

void VSTHostComponent::layoutPluginEditor(Rectangle<int> area)
{
    if (!pluginEditor) return;

    int w = pluginEditor->getWidth();
    int h = pluginEditor->getHeight();
    if (w == 0 || h == 0) { w = 400; h = 300; }

    Rectangle<int> r(w, h);
    r.setCentre(area.getCentre());
    r.setX(jlimit(area.getX(), area.getRight() - w, r.getX()));
    r.setY(jlimit(area.getY(), area.getBottom() - h, r.getY()));
    pluginEditor->setBounds(r);
}

void VSTHostComponent::resized()
{
    auto area = getLocalBounds();

    // Top – presets
    auto top = area.removeFromTop(32);
    FlexBox pf; pf.flexDirection = FlexBox::Direction::row;
    pf.justifyContent = FlexBox::JustifyContent::center;
    for (auto& b : presetBtn) pf.items.add(FlexItem(b).withMinWidth(90).withMinHeight(26));
    pf.performLayout(top);

    // Bottom – learn
    auto bottom = area.removeFromBottom(30);
    FlexBox lf; lf.flexDirection = FlexBox::Direction::row;
    lf.justifyContent = FlexBox::JustifyContent::center;
    for (auto& b : learnBtn) lf.items.add(FlexItem(b).withMinWidth(60).withMinHeight(24));
    lf.performLayout(bottom);

    layoutPluginEditor(area.reduced(4));
}

//───────── External setters (BankEditor) ───────────────────────────────
void VSTHostComponent::setExternalPresetIndex(int idx)
{
    if (idx == activePreset || idx < 0 || idx >= kNumPresets) return;
    activePreset = idx;
    updatePresetColours();
}

void VSTHostComponent::setExternalLearnState(int cc, bool on)
{
    if (cc < 0 || cc >= kNumLearn) return;
    learnBtn[cc].setToggleState(on, dontSendNotification);
    updateLearnColours();
}

//───────── Misc helpers ────────────────────────────────────────────────
void VSTHostComponent::updatePluginCpuLoad(double load)
{
    lastCpuLoad = load;
    globalCpuLoad.store(load);
}
void VSTHostComponent::resetBPM()
{
    if (bpmLabel) bpmLabel->setText("—", dontSendNotification);
}

int VSTHostComponent::getPluginParametersCount() const noexcept
{
#if JUCE_VERSION < 0x060000
    return plugin ? plugin->getNumParameters() : 0;
#else
    return plugin ? static_cast<int>(plugin->getParameters().size()) : 0;
#endif
}
