#pragma once

#include <JuceHeader.h>
#include <vector>
#include <functional>
#include "FileManager.h"

//==============================================================================
// Структура для хранения маппинга одной CC-кнопки
struct CCMapping
{
    bool enabled = false;  // включён ли маппинг
    int  pluginParamIndex = -1;     // индекс параметра плагина
    int  value = 64;     // CC-значение (0…127)
};

//==============================================================================
// Компонент BankRow — отображает один банк в виде двух строк:
//  • Верхняя строка: имя банка, 6 полей для имён пресетов и поле плагин-пресета.
//  • Нижняя строка: 10 кнопок для CC-маппинга (ранее это были TextEditor).
class BankRow : public juce::Component,
    public juce::TextEditor::Listener,
    private juce::Button::Listener
{
public:
    BankRow(int bankIndex,
        const juce::String& defaultBankName,
        const juce::StringArray& defaultPresetNames)
        : index(bankIndex)
    {
        // — поле имени банка
        bankNameEditor.setText(defaultBankName);
        bankNameEditor.addListener(this);
        bankNameEditor.setJustification(juce::Justification::centredLeft);
        addAndMakeVisible(bankNameEditor);

        // — 6 текстовых редакторов для имён пресетов
        for (int i = 0; i < defaultPresetNames.size(); ++i)
        {
            auto* ed = new juce::TextEditor();
            ed->setText(defaultPresetNames[i]);
            ed->addListener(this);
            ed->setJustification(juce::Justification::centred);
            presetEditors.add(ed);
            addAndMakeVisible(ed);
        }

        // — текстовый редактор для номера плагин-пресета
        pluginPresetEditor.setText("0");
        pluginPresetEditor.addListener(this);
        pluginPresetEditor.setJustification(juce::Justification::centred);
        pluginPresetEditor.setInputRestrictions(3, "0123456789");
        addAndMakeVisible(pluginPresetEditor);

        // — вместо 10 TextEditor’ов теперь 10 кнопок CC-маппинга
        ccMappings.resize(10);
        for (int i = 0; i < 10; ++i)
        {
            auto* btn = new juce::TextButton("CC " + juce::String(i + 1));
            btn->setComponentID(juce::String(i));  // сохраняем индекс
            btn->addListener(this);
            addAndMakeVisible(btn);
            ccMappingButtons.add(btn);
        }
    }

    ~BankRow() override
    {
        bankNameEditor.removeListener(this);
        for (auto* ed : presetEditors)       ed->removeListener(this);
        pluginPresetEditor.removeListener(this);
        for (auto* btn : ccMappingButtons)   btn->removeListener(this);
    }
    //==============================================================================
    // Публичные геттеры
    juce::String getBankName() const
    {
        return bankNameEditor.getText();
    }

    juce::String getPresetName(int i) const
    {
        jassert(i >= 0 && i < presetEditors.size());
        return presetEditors[i]->getText();
    }

    int getPluginPresetNumber() const
    {
        return pluginPresetEditor.getText().getIntValue();
    }

    // Возвращает вектор из 10 CCMapping для внешней логики
    const std::vector<CCMapping>& getCCMappings() const
    {
        return ccMappings;
    }


    /** Обновляет поля UI (имя банка, пресеты, плагин-пресет) */
    void updateFields(const juce::String& bankName,
        const juce::StringArray& presetNames,
        const juce::String& pluginPresetStr)
    {
        bankNameEditor.setText(bankName, juce::dontSendNotification);

        for (int i = 0; i < presetEditors.size(); ++i)
            if (i < presetNames.size())
                presetEditors[i]->setText(presetNames[i],
                    juce::dontSendNotification);

        pluginPresetEditor.setText(pluginPresetStr,
            juce::dontSendNotification);

        // Обновляем текст на CC-кнопках согласно текущим маппингам
        for (int i = 0; i < ccMappingButtons.size(); ++i)
        {
            auto& m = ccMappings[i];
            if (m.enabled)
                ccMappingButtons[i]->setButtonText
                ("Param " + juce::String(m.pluginParamIndex)
                    + " = " + juce::String(m.value));
            else
                ccMappingButtons[i]->setButtonText
                ("CC " + juce::String(i + 1));
        }
    }


    //==============================================================================  
    // TextEditor::Listener
    void textEditorTextChanged(juce::TextEditor& editor) override
    {
        if (&editor == &bankNameEditor)
        {
            if (onRowChanged) onRowChanged(index);
            return;
        }

        for (int i = 0; i < presetEditors.size(); ++i)
            if (&editor == presetEditors[i])
            {
                if (onRowChanged) onRowChanged(index);
                return;
            }

        if (&editor == &pluginPresetEditor)
        {
            if (onRowChanged) onRowChanged(index);
            return;
        }
    }


    //==============================================================================  
    // Button::Listener — ловим клики по 10 CC-кнопкам
    void buttonClicked(juce::Button* b) override
    {
        for (int i = 0; i < ccMappingButtons.size(); ++i)
        {
            if (b == ccMappingButtons[i])
            {
                openMappingDialog(i);
                return;
            }
        }
    }


    //==============================================================================  
    /** Запускает диалог маппинга для кнопки #ccIndex */
    void openMappingDialog(int ccIndex)
    {
        // TODO: тут нужно:
        // 1) взять AudioPluginInstance* из внешнего хоста
        // 2) отрисовать окно с списком параметров плагина,
        //    для каждого — чекбокс и ползунок 0..127
        // 3) при Save сохранить в ccMappings[ccIndex]
        // 4) вызвать onMappingChanged (index, ccIndex, ccMappings[ccIndex])
    }


    //==============================================================================  
    // Колбэки наружу
    std::function<void(int bankIndex)>                                    onRowChanged;
    std::function<void(int bankIndex, int ccIndex, const CCMapping&)>    onMappingChanged;


private:
    //==============================================================================  
    int                                            index{ 0 };
    juce::TextEditor                               bankNameEditor;
    juce::OwnedArray<juce::TextEditor>             presetEditors;

    // вместо TextEditor для CC теперь кнопки + вектор из CCMapping
    juce::OwnedArray<juce::TextButton>             ccMappingButtons;
    std::vector<CCMapping>                         ccMappings;

    juce::TextEditor                               pluginPresetEditor;
    bool                                           isActiveRow{ false };

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(BankRow)
};

//==============================================================================
// Класс BankManager управляет списком из 15 банков.
// Каждый банк содержит:
// • Имя банка,
// • 6 имен пресетов,
// • CC mapping для 10 контроллеров,
// • Номер плагин-пресета.
class BankManager : public juce::Component,
    public juce::Timer
{
public:
    // Эти методы сохраняют/грузят всю структуру банков в указанный файл
    void saveSettingsToFile(const juce::File& configFile);
    void loadSettingsFromFile(const juce::File& configFile);

    //==============================================================================  
    struct Bank
    {
        juce::String                    bankName;
        juce::StringArray               presetNames;       // 6 пресетов
        std::vector<std::vector<bool>>  ccPresetStates;    // 6×10 состояний CC
        std::vector<int>                presetVolume;      // 6 громкостей
        std::vector<CCMapping>          ccMappings;        // ← 10 CC-маппингов
        int                             pluginPreset = 0;  // индекс пресета в плагине

        Bank()
            : bankName("Untitled"),
            presetNames(),
            ccPresetStates(6, std::vector<bool>(10, false)),
            presetVolume(6, 64),
            ccMappings(10, CCMapping{}),  // инициализируем 10 пустых маппингов
            pluginPreset(1)
        {
            // имена пресетов по умолчанию
            presetNames.clear();
            for (int i = 0; i < 6; ++i)
                presetNames.add("PRESET" + juce::String(i + 1));
        }
    };

    // Доступ к векторам банков
    const std::vector<Bank>& getBanks() const { return banks; }
    std::vector<Bank>& getBanks() { return banks; }

    //==============================================================================  
    BankManager()
    {
        // создаём 15 пустых банков
        banks.resize(15);
        for (int i = 0; i < banks.size(); ++i)
        {
            banks[i].bankName = "BANK " + juce::String(i + 1);
            banks[i].presetNames.clear();
            for (int j = 0; j < 6; ++j)
                banks[i].presetNames.add("PRESET" + juce::String(j + 1));
            // ccMappings уже инициализирован в Bank()
        }
        currentBankIndex = 0;

        // создаём UI-строки
        rowContainer = std::make_unique<juce::Component>();
        for (int i = 0; i < banks.size(); ++i)
        {
            auto row = std::make_unique<BankRow>(
                i, banks[i].bankName, banks[i].presetNames);

            // когда изменилась любая текстовая часть: обновляем bankName, presetNames, pluginPreset
            row->onRowChanged = [this](int bankIndex)
                {
                    banks[bankIndex].bankName = bankRows[bankIndex]->getBankName();
                    for (int j = 0; j < 6; ++j)
                        banks[bankIndex].presetNames.set(j,
                            bankRows[bankIndex]->getPresetName(j));
                    banks[bankIndex].pluginPreset = bankRows[bankIndex]->getPluginPresetNumber();

                    if (onBankManagerChanged) onBankManagerChanged();
                    restartAutoSaveTimer();
                };

            // когда изменился один из 10 CC-маппингов:
            row->onMappingChanged = [this](int bankIndex, int ccIndex, const CCMapping& m)
                {
                    banks[bankIndex].ccMappings[ccIndex] = m;
                    if (onBankManagerChanged) onBankManagerChanged();
                    restartAutoSaveTimer();
                };

            rowContainer->addAndMakeVisible(row.get());
            bankRows.add(std::move(row));
        }

        addAndMakeVisible(viewport);
        viewport.setViewedComponent(rowContainer.get(), false);

        // кнопка Reset/Save/Load
        resetDefaultsButton.setButtonText("Reset Defaults");
        resetDefaultsButton.onClick = [this]()
            {
                juce::PopupMenu m;
                m.addItem(1, "Reset Defaults");
                m.addItem(2, "Save Configuration");
                m.addItem(3, "Load Configuration");
                m.showMenuAsync(juce::PopupMenu::Options(),
                    [this](int result)
                    {
                        if (result == 1)
                        {
                            juce::AlertWindow::showOkCancelBox(
                                juce::MessageBoxIconType::WarningIcon,
                                "Reset Defaults",
                                "Are you sure?",
                                "OK", "Cancel", this,
                                juce::ModalCallbackFunction::create([this](int r)
                                    {
                                        if (r == 1)
                                            resetAllDefaults();
                                    }));
                        }
                        else if (result == 2)
                        {
                            FileManager::chooseSaveFileAsync(
                                "Save bank configuration...", "*.ini",
                                [this](const juce::File& f)
                                {
                                    if (f != juce::File())
                                        saveSettingsToFile(f);
                                });
                        }
                        else if (result == 3)
                        {
                            FileManager::chooseLoadFileAsync(
                                "Load bank configuration...", "*.ini",
                                [this](const juce::File& f)
                                {
                                    if (f.existsAsFile())
                                        loadSettingsFromFile(f);
                                });
                        }
                    });
            };
        addAndMakeVisible(resetDefaultsButton);

        // авто-загрузка, подсветка, автосохранение
        loadSettings();
        updateRowHighlighting();
        startTimer(2000);
    }

    ~BankManager() override
    {
        stopTimer();
    }

    // автосохранение через 2 секунды после изменения
    void restartAutoSaveTimer()
    {
        stopTimer();
        startTimer(2000);
    }

    void timerCallback() override
    {
        saveSettings();
        stopTimer();
    }

    void resized() override
    {
        auto r = getLocalBounds();
        constexpr int buttonH = 40;
        resetDefaultsButton.setBounds(r.removeFromBottom(buttonH).reduced(10));
        viewport.setBounds(r);

        constexpr int rowH = 100, gap = 8;
        rowContainer->setSize(viewport.getWidth(), rowH + gap);

        for (int i = 0; i < bankRows.size(); ++i)
        {
            auto* row = bankRows[i];
            if (i == currentBankIndex)
            {
                row->setVisible(true);
                row->setBounds(0, 0, rowContainer->getWidth(), rowH);
            }
            else
            {
                row->setVisible(false);
            }
        }
    }

    // доступ к активному банку
    const Bank& getBank(int index) const
    {
        jassert(index >= 0 && index < banks.size());
        return banks[index];
    }

    int getActiveBankIndex() const { return currentBankIndex; }

    void setActiveBankIndex(int newIndex)
    {
        if (newIndex >= 0 && newIndex < banks.size() && newIndex != currentBankIndex)
        {
            currentBankIndex = newIndex;
            if (onBankManagerChanged) onBankManagerChanged();
            updateRowHighlighting();
        }
    }

    /** Включение/выключение поддержки плагин-пресета */
    void setPluginPresetSupported(bool supported)
    {
        for (auto* row : bankRows)
            row->setPluginPresetEnabled(supported);
    }

    /** Колбэк на любые изменения (смена банка/пресета/маппинга) */
    std::function<void()> onBankManagerChanged;

private:
    // сохраняем/грузим дефолты из AppData
    void saveSettings()
    {
        auto f = juce::File::getSpecialLocation(juce::File::userApplicationDataDirectory)
            .getChildFile("BankManagerSettings.ini");
        saveSettingsToFile(f);
    }
    void loadSettings()
    {
        auto f = juce::File::getSpecialLocation(juce::File::userApplicationDataDirectory)
            .getChildFile("BankManagerSettings.ini");
        loadSettingsFromFile(f);
    }

    /** Сбрасывает всё в banks к дефолту и обновляет UI */
    void resetAllDefaults()
    {
        // модель
        for (int i = 0; i < banks.size(); ++i)
        {
            banks[i] = Bank();               // вызовет конструктор Bank с дефолтом
            banks[i].bankName = "BANK " + juce::String(i + 1);
        }
        // UI
        for (int i = 0; i < bankRows.size(); ++i)
        {
            bankRows[i]->updateFields(
                banks[i].bankName,
                banks[i].presetNames,
                juce::String(banks[i].pluginPreset));
            bankRows[i]->setCCMappings(banks[i].ccMappings);
        }

        if (onBankManagerChanged) onBankManagerChanged();
        saveSettings();
    }

    //==============================================================================
    std::vector<Bank>               banks;
    int                             currentBankIndex = 0;
    juce::OwnedArray<BankRow>       bankRows;
    std::unique_ptr<juce::Component> rowContainer;
    juce::Viewport                  viewport;
    juce::TextButton                resetDefaultsButton;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(BankManager)
};
