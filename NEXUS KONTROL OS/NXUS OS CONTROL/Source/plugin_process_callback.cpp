#include "plugin_process_callback.h"
#include "InputControlComponent.h"
#include "vst_host.h"
#include "TunerComponent.h"
#include <vector>
#include <mutex>    // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã tunerList
//#include "FilePlayerEngine.h" // ADD: –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤

//==============================================================================
//  –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
//==============================================================================
PluginProcessCallback::PluginProcessCallback(juce::AudioPluginInstance* p,
    double                      rate) noexcept
    : currentSampleRate(rate)
{
    setPlugin(p);
}
//==============================================================================
//  setPlugin  ‚Äì –∞—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–¥–º–µ–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
//==============================================================================
void PluginProcessCallback::setPlugin(juce::AudioPluginInstance* p) noexcept
{
    pluginInstance.store(p, std::memory_order_release);
}
//==============================================================================
//  Audio I/O Callback —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º üéõÔ∏è
//  ‚Äî –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω –µ—Å—Ç—å: –ø–ª–∞–≥–∏–Ω ‚Üí –ª—É–ø–µ—Ä (post-FX) ‚Üí OutControl ‚Üí –≤—ã—Ö–æ–¥
//  ‚Äî –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ—Ç: —Å—Ç–µ—Ä–µ–æ–∏–∑–∞—Ü–∏—è ‚Üí (–ª—É–ø–µ—Ä –ø–æ –∂–µ–ª–∞–Ω–∏—é) ‚Üí OutControl ‚Üí –≤—ã—Ö–æ–¥
//==============================================================================

void PluginProcessCallback::audioDeviceIOCallbackWithContext(
    const float* const* inputChannelData,
    int                  numInputChannels,
    float* const* outputChannelData,
    int                  numOutputChannels,
    int                  numSamples,
    const juce::AudioIODeviceCallbackContext& /*ctx*/)
{
    // 0) –°–Ω–∏–º–æ–∫ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –Ω–∞—á–∞–ª–µ
    auto* ic = inputControl.load(std::memory_order_acquire);
    auto* oc = outControl.load(std::memory_order_acquire);
    auto* lp = looper.load(std::memory_order_acquire);
    auto* inst = pluginInstance.load(std::memory_order_acquire);

    // 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ö–æ–¥ –≤ —Ç—é–Ω–µ—Ä—ã (–º–æ–Ω–æ –º–∏–∫—Å)
    {
        juce::AudioBuffer<float> monoMix(1, numSamples);
        monoMix.clear();

        if (numInputChannels > 0 && inputChannelData[0])
            monoMix.addFrom(0, 0, inputChannelData[0], numSamples);
        if (numInputChannels > 1 && inputChannelData[1])
            monoMix.addFrom(0, 0, inputChannelData[1], numSamples);

        std::lock_guard<std::mutex> lk(tunersMutex);
        for (auto* t : tuners)
            if (t && t->isVisible())
                t->pushAudioData(monoMix.getReadPointer(0), numSamples);
    }

    // 2) InputControl ‚Äî –≥–µ–π—Ç –ø–µ—Ä–≤—ã–º
    if (ic && !ic->isShuttingDown())
    {
        float* chans[2] = { nullptr, nullptr };
        if (numInputChannels > 0 && inputChannelData[0])
            chans[0] = const_cast<float*>(inputChannelData[0]);
        if (numInputChannels > 1 && inputChannelData[1])
            chans[1] = const_cast<float*>(inputChannelData[1]);

        ic->processBlock(chans, numSamples);
    }

    // 3) –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ—Ç ‚Äî –±–∞–π–ø–∞—Å —Å–æ —Å—Ç–µ—Ä–µ–æ–∏–∑–∞—Ü–∏–µ–π
    if (inst == nullptr)
    {
        juce::AudioBuffer<float> stereoBuffer;
        stereoBuffer.setSize(2, numSamples, false, false, true);

        auto* L = stereoBuffer.getWritePointer(0);
        auto* R = stereoBuffer.getWritePointer(1);

        if (numInputChannels >= 2)
        {
            juce::FloatVectorOperations::copy(L, inputChannelData[0], numSamples);
            juce::FloatVectorOperations::copy(R, inputChannelData[1], numSamples);
        }
        else if (numInputChannels == 1)
        {
            juce::FloatVectorOperations::copy(L, inputChannelData[0], numSamples);
            juce::FloatVectorOperations::copy(R, inputChannelData[0], numSamples);
        }
        else
        {
            juce::FloatVectorOperations::clear(L, numSamples);
            juce::FloatVectorOperations::clear(R, numSamples);
        }

        // –õ—É–ø–µ—Ä (–±–µ–∑ —Ä–∞–Ω–Ω–µ–≥–æ return, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç)
        if (lp && lp->isPreparedSuccessfully() && !lp->isShuttingDown())
            lp->process(stereoBuffer);

        // OutControl
        if (oc && !oc->isShuttingDown())
            oc->processAudioBlock(stereoBuffer);

        // –í—ã—Ö–æ–¥
        const int copyCh = juce::jmin(numOutputChannels, stereoBuffer.getNumChannels());
        for (int ch = 0; ch < copyCh; ++ch)
            juce::FloatVectorOperations::copy(outputChannelData[ch], stereoBuffer.getReadPointer(ch), numSamples);
        for (int ch = copyCh; ch < numOutputChannels; ++ch)
            juce::FloatVectorOperations::clear(outputChannelData[ch], numSamples);
        return;
    }

    // 4) –ï—Å—Ç—å –ø–ª–∞–≥–∏–Ω ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π –±—É—Ñ–µ—Ä
    const int totalCh = juce::jmax(numInputChannels, numOutputChannels);
    juce::AudioBuffer<float> inputBuffer(totalCh, numSamples);

    for (int ch = 0; ch < numInputChannels; ++ch)
        if (inputChannelData[ch])
            inputBuffer.copyFrom(ch, 0, inputChannelData[ch], numSamples);
        else
            inputBuffer.clear(ch, 0, numSamples);

    for (int ch = numInputChannels; ch < totalCh; ++ch)
        inputBuffer.clear(ch, 0, numSamples);

    // 5) –ü–ª–∞–≥–∏–Ω
    juce::MidiBuffer midi;
    const auto t0 = juce::Time::getHighResolutionTicks();
    inst->processBlock(inputBuffer, midi);
    const auto t1 = juce::Time::getHighResolutionTicks();

    // 6) dry/wet
    dryBuffer.makeCopyOf(inputBuffer);
    wetBuffer.makeCopyOf(dryBuffer);

    if (lp && lp->isPreparedSuccessfully() && !lp->isShuttingDown())
        lp->process(wetBuffer);

    // 7) –ú–∏–∫—Å –∏ –≤—ã–≤–æ–¥
    for (int ch = 0; ch < numOutputChannels; ++ch)
    {
        auto* out = outputChannelData[ch];
        if (!out) continue;

        const int dryCh = (ch < dryBuffer.getNumChannels()) ? ch : 0;
        const int wetCh = (ch < wetBuffer.getNumChannels()) ? ch : 0;

        // –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: –ø–ª–∞–≥–∏–Ω (dry)
        juce::FloatVectorOperations::copy(out, dryBuffer.getReadPointer(dryCh), numSamples);

        // –¥–æ–±–∞–≤–ª—è–µ–º –ª—É–ø–µ—Ä/–ø–ª–µ–µ—Ä (wet)
        if (lp && lp->isPreparedSuccessfully() && !lp->isShuttingDown())
        {
            const bool looperIsPlaying = (lp->getMode() == LooperEngine::Mode::Looper)
                ? (lp->getState() == LooperEngine::Playing)
                : false;

            const bool playerIsPlaying = (lp->getMode() == LooperEngine::Mode::Player)
                ? lp->isPlaying() // —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–ª–µ–µ—Ä–∞
                : false;

            if (looperIsPlaying || playerIsPlaying)
                juce::FloatVectorOperations::add(out, wetBuffer.getReadPointer(wetCh), numSamples);
        }
    }
    // 8) CPU –º–µ—Ç—Ä–∏–∫–∞
    if (hostComponent != nullptr && currentSampleRate > 0.0)
    {
        const double blkSec = double(numSamples) / currentSampleRate;
        const double used = juce::Time::highResolutionTicksToSeconds(t1 - t0);
        hostComponent->updatePluginCpuLoad(blkSec > 0.0 ? used / blkSec : 0.0);
    }

    // 9) –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä ‚Äî OutControl
    if (oc && !oc->isShuttingDown())
    {
        juce::AudioBuffer<float> masterBuffer(outputChannelData, numOutputChannels, numSamples);
        oc->processAudioBlock(masterBuffer);
    }
}

//==============================================================================
//  AudioIODeviceCallback (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞) ‚Äì –ø—Ä–æ–∫—Å–∏
//==============================================================================
void PluginProcessCallback::audioDeviceIOCallback(const float** inputChannelData,
    int            numInputChannels,
    float** outputChannelData,
    int            numOutputChannels,
    int            numSamples)
{
    static const juce::AudioIODeviceCallbackContext dummy{};
    audioDeviceIOCallbackWithContext(inputChannelData,
        numInputChannels,
        outputChannelData,
        numOutputChannels,
        numSamples,
        dummy);
}
//==============================================================================
//  –ù–∞—á–∞–ª–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Äì prepareToPlay + prepare —Ç—é–Ω–µ—Ä–æ–≤ –∏ –ª—É–ø–µ—Ä–∞
//==============================================================================
void PluginProcessCallback::audioDeviceAboutToStart(juce::AudioIODevice* device)
{
    // 1) –°–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑
    currentSampleRate = device->getCurrentSampleRate();
    const int bufSize = device->getCurrentBufferSizeSamples();

    // 2) InputControl
    if (auto* ic = inputControl.load(std::memory_order_acquire))
    {
        if (!ic->isShuttingDown())
            ic->prepare(currentSampleRate, bufSize);
    }

    // 3) –¢—é–Ω–µ—Ä—ã (–ø–æ–¥ –∑–∞—â–∏—Ç–æ–π)
    {
        std::lock_guard<std::mutex> lk(tunersMutex);
        for (auto* t : tuners)
            if (t) t->prepare(bufSize, currentSampleRate);
    }

    // 4) –ü–ª–∞–≥–∏–Ω
    if (auto* inst = pluginInstance.load(std::memory_order_acquire))
        inst->prepareToPlay(currentSampleRate, bufSize);

    // 5) –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥–æ—Ç–æ–≤–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±—É—Ñ–µ—Ä—ã
    const int inCh = device->getActiveInputChannels().countNumberOfSetBits();
    const int outCh = device->getActiveOutputChannels().countNumberOfSetBits();
    const int maxCh = juce::jmax(inCh, outCh, 1); // –º–∏–Ω–∏–º—É–º 1, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å 0-–∫–∞–Ω–∞–ª—å–Ω—ã–µ –±—É—Ñ–µ—Ä—ã

    dryBuffer.setSize(maxCh, bufSize, false, false, true);
    wetBuffer.setSize(maxCh, bufSize, false, false, true);
    dryBuffer.clear();
    wetBuffer.clear();

    // 6) –õ—É–ø–µ—Ä
    if (auto* lp = looper.load(std::memory_order_acquire))
    {
        if (!lp->isShuttingDown())
            lp->prepare(currentSampleRate, bufSize);
    }

    // 7) OutControl (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä)
    if (auto* oc = outControl.load(std::memory_order_acquire))
    {
        if (!oc->isShuttingDown())
            oc->prepare(currentSampleRate, bufSize);
    }
}

void PluginProcessCallback::audioDeviceStopped()
{
    // 1) –ü–ª–∞–≥–∏–Ω
    if (auto* inst = pluginInstance.load(std::memory_order_acquire))
        inst->releaseResources();

    // 2) –õ—É–ø–µ—Ä (–º—è–≥–∫–∏–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    if (auto* lp = looper.load(std::memory_order_acquire))
    {
        if (!lp->isShuttingDown())
            lp->reset();
    }

    // 3) –ü–æ–¥—á–∏—Å—Ç–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±—É—Ñ–µ—Ä—ã (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
    dryBuffer.clear();
    wetBuffer.clear();
}

//==============================================================================
//  setHostComponent ‚Äì –æ–±—ã—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
//==============================================================================
void PluginProcessCallback::setHostComponent(VSTHostComponent* host) noexcept
{
    hostComponent = host;
}

//==============================================================================
//  setTuner ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç—é–Ω–µ—Ä
//==============================================================================
void PluginProcessCallback::setTuner(TunerComponent* t) noexcept
{
    if (!t) return;
    std::lock_guard<std::mutex> lk(tunersMutex);
    if (std::find(tuners.begin(), tuners.end(), t) == tuners.end())
        tuners.push_back(t);

    if (currentSampleRate > 0 && dryBuffer.getNumSamples() > 0)
        t->prepare(dryBuffer.getNumSamples(), currentSampleRate);
}

void PluginProcessCallback::removeTuner(TunerComponent* t) noexcept
{
    std::lock_guard<std::mutex> lk(tunersMutex);
    tuners.erase(std::remove(tuners.begin(), tuners.end(), t),
        tuners.end());
}

//==============================================================================  
//  setLooperEngine ‚Äì —Å–≤—è–∑—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –ª—É–ø–µ—Ä–∞  
//==============================================================================  
void PluginProcessCallback::setLooperEngine(LooperEngine* engine) noexcept
{
    looper = engine;
}
//==============================================================================  
//  setPlaerEngine ‚Äì —Å–≤—è–∑—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –ø–ª–µ–µ—Ä–∞
//==============================================================================  
void PluginProcessCallback::setFilePlayerEngine(FilePlayerEngine* engine) noexcept
{
    filePlayerEngine = engine; // –Ω–µ –≤–ª–∞–¥–µ–µ–º
}

//==============================================================================  
//  –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚Äì –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—é–Ω–µ—Ä–æ–≤ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –º—å—é—Ç–µ–∫—Å–∞  
//==============================================================================
PluginProcessCallback::~PluginProcessCallback()
{
    std::lock_guard<std::mutex> lk(tunersMutex);
    tuners.clear();
}
// –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ö–æ–¥ –∫ —Å—Ç–µ—Ä–µ–æ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —á–∏—Å–ª–∞ –∫–∞–Ω–∞–ª–æ–≤
// ====================== üéö Stereo Utils üéö ======================
void PluginProcessCallback::stereoizeInput(const float* const* inputChannelData,
    int                  numInputChannels,
    juce::AudioBuffer<float>& dest,
    int                  numSamples)
{
    dest.clear(); // üßπ –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω—É–ª—è–µ–º –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é

    if (numInputChannels >= 2 && inputChannelData[0] && inputChannelData[1])
    {
        // üéØ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Å—Ç–µ—Ä–µ–æ ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        dest.copyFrom(0, 0, inputChannelData[0], numSamples); // L
        dest.copyFrom(1, 0, inputChannelData[1], numSamples); // R
    }
    else if (numInputChannels == 1 && inputChannelData[0])
    {
        // üéØ –ú–æ–Ω–æ ‚Äî –¥—É–±–ª–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞
        dest.copyFrom(0, 0, inputChannelData[0], numSamples); // L
        dest.copyFrom(1, 0, inputChannelData[0], numSamples); // R
    }
    else
    {
        // üéØ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏—à–∏–Ω—É
        dest.clear();
    }
}


