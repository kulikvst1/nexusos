#include "plugin_process_callback.h"
#include "InputControlComponent.h"
#include "vst_host.h"
#include "TunerComponent.h"
#include <vector>
#include <mutex>    // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã tunerList
#include "FilePlayerEngine.h" // ADD: –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤

//==============================================================================
//  –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
//==============================================================================
PluginProcessCallback::PluginProcessCallback(juce::AudioPluginInstance* p,
    double                      rate) noexcept
    : currentSampleRate(rate)
{
    setPlugin(p);
}
//==============================================================================
//  setPlugin  ‚Äì –∞—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–¥–º–µ–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
//==============================================================================
void PluginProcessCallback::setPlugin(juce::AudioPluginInstance* p) noexcept
{
    pluginInstance.store(p, std::memory_order_release);
}
//==============================================================================
//  Audio I/O Callback —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º üéõÔ∏è
//  ‚Äî –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω –µ—Å—Ç—å: –ø–ª–∞–≥–∏–Ω ‚Üí –ª—É–ø–µ—Ä (post-FX) ‚Üí OutControl ‚Üí –≤—ã—Ö–æ–¥
//  ‚Äî –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ—Ç: —Å—Ç–µ—Ä–µ–æ–∏–∑–∞—Ü–∏—è ‚Üí (–ª—É–ø–µ—Ä –ø–æ –∂–µ–ª–∞–Ω–∏—é) ‚Üí OutControl ‚Üí –≤—ã—Ö–æ–¥
//==============================================================================

void PluginProcessCallback::audioDeviceIOCallbackWithContext(
    const float* const* inputChannelData,
    int                  numInputChannels,
    float* const* outputChannelData,
    int                  numOutputChannels,
    int                  numSamples,
    const juce::AudioIODeviceCallbackContext& /*ctx*/)
{
    // üîç 0) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ö–æ–¥ –≤ —Ç—é–Ω–µ—Ä—ã
    {
        std::lock_guard<std::mutex> lk(tunersMutex);
        for (auto* t : tuners)
            if (t->isVisible())
                t->pushAudioData(inputChannelData[0], numSamples);
    }

    // ‚û§ 1) InputControl ‚Äî –≥–µ–π—Ç –ø–µ—Ä–≤—ã–º
    if (inputControl != nullptr)
    {
        float* chans[2] = { nullptr, nullptr };
        if (numInputChannels > 0 && inputChannelData[0]) chans[0] = const_cast<float*>(inputChannelData[0]);
        if (numInputChannels > 1 && inputChannelData[1]) chans[1] = const_cast<float*>(inputChannelData[1]);
        inputControl->processBlock(chans, numSamples);
    }

    // 1b) TRIGGER ‚Üí FilePlayerEngine (–ø–æ—Å–ª–µ InputControl)
    if (filePlayerEngine != nullptr && filePlayerEngine->isTriggerArmed() && filePlayerEngine->isReady())
    {
        auto chs = juce::jmax(1, numInputChannels);
        juce::AudioBuffer<float> inView(const_cast<float**>(inputChannelData), chs, numSamples);
        filePlayerEngine->processInputBuffer(inView);
    }

    // üéØ 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–≥–∏–Ω
    auto* inst = pluginInstance.load(std::memory_order_acquire);

    // üåÄ 2a) –ù–µ—Ç –ø–ª–∞–≥–∏–Ω–∞ ‚Üí –±–∞–π–ø–∞—Å
    if (inst == nullptr)
    {
        juce::AudioBuffer<float> stereoBuffer;
        stereoBuffer.setSize(2, numSamples, false, false, true);

        auto* L = stereoBuffer.getWritePointer(0);
        auto* R = stereoBuffer.getWritePointer(1);

        if (numInputChannels >= 2)
        {
            juce::FloatVectorOperations::copy(L, inputChannelData[0], numSamples);
            juce::FloatVectorOperations::copy(R, inputChannelData[1], numSamples);
        }
        else if (numInputChannels == 1)
        {
            juce::FloatVectorOperations::copy(L, inputChannelData[0], numSamples);
            juce::FloatVectorOperations::copy(R, inputChannelData[0], numSamples);
        }
        else
        {
            juce::FloatVectorOperations::clear(L, numSamples);
            juce::FloatVectorOperations::clear(R, numSamples);
        }

        // üîÑ –õ—É–ø–µ—Ä
        if (looper != nullptr && looper->isPreparedSuccessfully())
            looper->process(stereoBuffer);

        // üéß –ü–ª–µ–µ—Ä (—Å–º–µ—à–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º –≤—Ö–æ–¥)
        if (filePlayerEngine != nullptr && filePlayerEngine->isReady())
        {
            juce::AudioBuffer<float> playerBuf;
            const int chs = stereoBuffer.getNumChannels();
            playerBuf.setSize(chs, numSamples, false, false, true);
            playerBuf.clear();

            juce::AudioSourceChannelInfo pinfo(&playerBuf, 0, numSamples);
            filePlayerEngine->getNextAudioBlock(pinfo);

            const int addCh = juce::jmin(chs, playerBuf.getNumChannels());
            for (int ch = 0; ch < addCh; ++ch)
                juce::FloatVectorOperations::add(stereoBuffer.getWritePointer(ch),
                    playerBuf.getReadPointer(ch),
                    numSamples);
        }

        // üéöÔ∏è OutControl
        if (outControl != nullptr)
            outControl->processAudioBlock(stereoBuffer);

        // üöÄ –í—ã—Ö–æ–¥
        const int copyCh = juce::jmin(numOutputChannels, stereoBuffer.getNumChannels());
        for (int ch = 0; ch < copyCh; ++ch)
            juce::FloatVectorOperations::copy(outputChannelData[ch], stereoBuffer.getReadPointer(ch), numSamples);
        for (int ch = copyCh; ch < numOutputChannels; ++ch)
            juce::FloatVectorOperations::clear(outputChannelData[ch], numSamples);
        return;
    }

    // üõ†Ô∏è 3) –ï—Å—Ç—å –ø–ª–∞–≥–∏–Ω ‚Üí –≤—Ö–æ–¥ ‚Üí –±—É—Ñ–µ—Ä
    const int totalCh = juce::jmax(numInputChannels, numOutputChannels);
    juce::AudioBuffer<float> inputBuffer(totalCh, numSamples);

    for (int ch = 0; ch < numInputChannels; ++ch)
        if (inputChannelData[ch])
            inputBuffer.copyFrom(ch, 0, inputChannelData[ch], numSamples);
        else
            inputBuffer.clear(ch, 0, numSamples);

    for (int ch = numInputChannels; ch < totalCh; ++ch)
        inputBuffer.clear(ch, 0, numSamples);

    // üéπ 4) –ü–ª–∞–≥–∏–Ω
    juce::MidiBuffer midi;
    const auto t0 = juce::Time::getHighResolutionTicks();
    inst->processBlock(inputBuffer, midi);
    const auto t1 = juce::Time::getHighResolutionTicks();

    // üíæ 5) dry = —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–≥–∏–Ω–∞
    dryBuffer.makeCopyOf(inputBuffer);

    // üîä 6) wet = dry + –ª—É–ø–µ—Ä + –ø–ª–µ–µ—Ä
    wetBuffer.makeCopyOf(dryBuffer);

    if (looper != nullptr && looper->isPreparedSuccessfully())
        looper->process(wetBuffer);

    if (filePlayerEngine != nullptr && filePlayerEngine->isReady())
    {
        juce::AudioBuffer<float> playerBuf;
        const int chs = wetBuffer.getNumChannels();
        playerBuf.setSize(chs, numSamples, false, false, true);
        playerBuf.clear();

        juce::AudioSourceChannelInfo pinfo(&playerBuf, 0, numSamples);
        filePlayerEngine->getNextAudioBlock(pinfo);

        const int addCh = juce::jmin(chs, playerBuf.getNumChannels());
        for (int ch = 0; ch < addCh; ++ch)
            juce::FloatVectorOperations::add(wetBuffer.getWritePointer(ch),
                playerBuf.getReadPointer(ch),
                numSamples);
    }

    // üéöÔ∏è 7) –ú–∏–∫—Å dry + wet ‚Üí –≤—ã—Ö–æ–¥
    for (int ch = 0; ch < numOutputChannels; ++ch)
    {
        auto* out = outputChannelData[ch];
        if (!out) continue;

        const int dryCh = (ch < dryBuffer.getNumChannels()) ? ch : 0;
        const int wetCh = (ch < wetBuffer.getNumChannels()) ? ch : 0;

        juce::FloatVectorOperations::copy(out, dryBuffer.getReadPointer(dryCh), numSamples);

        if ((looper && looper->isPreparedSuccessfully() && looper->getState() == LooperEngine::Playing) ||
            (filePlayerEngine && filePlayerEngine->isPlaying()))
        {
            juce::FloatVectorOperations::add(out, wetBuffer.getReadPointer(wetCh), numSamples);
        }
    }

    // üìä 8) CPU –º–µ—Ç—Ä–∏–∫–∞
    if (hostComponent != nullptr && currentSampleRate > 0.0)
    {
        const double blkSec = double(numSamples) / currentSampleRate;
        const double used = juce::Time::highResolutionTicksToSeconds(t1 - t0);
        hostComponent->updatePluginCpuLoad(blkSec > 0.0 ? used / blkSec : 0.0);
    }

    // üèÅ 9) –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä ‚Äî OutControl
    if (outControl != nullptr)
    {
        juce::AudioBuffer<float> masterBuffer(outputChannelData, numOutputChannels, numSamples);
        outControl->processAudioBlock(masterBuffer);
    }
}


//==============================================================================
//  AudioIODeviceCallback (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞) ‚Äì –ø—Ä–æ–∫—Å–∏
//==============================================================================
void PluginProcessCallback::audioDeviceIOCallback(const float** inputChannelData,
    int            numInputChannels,
    float** outputChannelData,
    int            numOutputChannels,
    int            numSamples)
{
    static const juce::AudioIODeviceCallbackContext dummy{};
    audioDeviceIOCallbackWithContext(inputChannelData,
        numInputChannels,
        outputChannelData,
        numOutputChannels,
        numSamples,
        dummy);
}
//==============================================================================
//  –ù–∞—á–∞–ª–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Äì prepareToPlay + prepare —Ç—é–Ω–µ—Ä–æ–≤ –∏ –ª—É–ø–µ—Ä–∞
//==============================================================================
void PluginProcessCallback::audioDeviceAboutToStart(juce::AudioIODevice* device)
{
    currentSampleRate = device->getCurrentSampleRate();
    int bufSize = device->getCurrentBufferSizeSamples();

    // –ü–û–î–ì–û–¢–û–í–ö–ê InputControl
    if (inputControl != nullptr)
        inputControl->prepare(currentSampleRate, bufSize);

    // –≥–æ—Ç–æ–≤–∏–º –≤—Å–µ—Ö —Ç—é–Ω–µ—Ä–æ–≤ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    {
        currentSampleRate = device->getCurrentSampleRate();
        auto bufSize = device->getCurrentBufferSizeSamples();

        std::lock_guard<std::mutex> lk(tunersMutex);
        for (auto* t : tuners)
            t->prepare(bufSize, currentSampleRate);
    }

    // –≥–æ—Ç–æ–≤–∏–º –ø–ª–∞–≥–∏–Ω
    if (auto* inst = pluginInstance.load(std::memory_order_acquire))
        inst->prepareToPlay(currentSampleRate, bufSize);

    auto maxCh = juce::jmax(device->getActiveInputChannels().countNumberOfSetBits(),
        device->getActiveOutputChannels().countNumberOfSetBits());
    dryBuffer.setSize(maxCh, bufSize, false, false, true);
    wetBuffer.setSize(maxCh, bufSize, false, false, true);

    if (looper)
        looper->prepare(currentSampleRate, bufSize);
    // ADD: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FilePlayerEngine
    if (filePlayerEngine != nullptr)
        filePlayerEngine->prepareToPlay(bufSize, currentSampleRate);

    if (outControl != nullptr)
        outControl->prepare(currentSampleRate, bufSize);

}

//==============================================================================
//  –°—Ç–æ–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Äì releaseResources + –ª—É–ø–µ—Ä reset
//==============================================================================
void PluginProcessCallback::audioDeviceStopped()
{
    if (auto* inst = pluginInstance.load(std::memory_order_acquire))
        inst->releaseResources();

    if (looper)
        looper->reset();
}

//==============================================================================
//  setHostComponent ‚Äì –æ–±—ã—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
//==============================================================================
void PluginProcessCallback::setHostComponent(VSTHostComponent* host) noexcept
{
    hostComponent = host;
}

//==============================================================================
//  setTuner ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç—é–Ω–µ—Ä
//==============================================================================
void PluginProcessCallback::setTuner(TunerComponent* t) noexcept
{
    if (!t) return;
    std::lock_guard<std::mutex> lk(tunersMutex);
    if (std::find(tuners.begin(), tuners.end(), t) == tuners.end())
        tuners.push_back(t);

    if (currentSampleRate > 0 && dryBuffer.getNumSamples() > 0)
        t->prepare(dryBuffer.getNumSamples(), currentSampleRate);
}

void PluginProcessCallback::removeTuner(TunerComponent* t) noexcept
{
    std::lock_guard<std::mutex> lk(tunersMutex);
    tuners.erase(std::remove(tuners.begin(), tuners.end(), t),
        tuners.end());
}

//==============================================================================  
//  setLooperEngine ‚Äì —Å–≤—è–∑—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –ª—É–ø–µ—Ä–∞  
//==============================================================================  
void PluginProcessCallback::setLooperEngine(LooperEngine* engine) noexcept
{
    looper = engine;
}
//==============================================================================  
//  setPlaerEngine ‚Äì —Å–≤—è–∑—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –ø–ª–µ–µ—Ä–∞
//==============================================================================  
void PluginProcessCallback::setFilePlayerEngine(FilePlayerEngine* engine) noexcept
{
    filePlayerEngine = engine; // –Ω–µ –≤–ª–∞–¥–µ–µ–º
}

//==============================================================================  
//  –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚Äì –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—é–Ω–µ—Ä–æ–≤ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –º—å—é—Ç–µ–∫—Å–∞  
//==============================================================================
PluginProcessCallback::~PluginProcessCallback()
{
    std::lock_guard<std::mutex> lk(tunersMutex);
    tuners.clear();
}
// –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ö–æ–¥ –∫ —Å—Ç–µ—Ä–µ–æ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —á–∏—Å–ª–∞ –∫–∞–Ω–∞–ª–æ–≤
// ====================== üéö Stereo Utils üéö ======================
void PluginProcessCallback::stereoizeInput(const float* const* inputChannelData,
    int                  numInputChannels,
    juce::AudioBuffer<float>& dest,
    int                  numSamples)
{
    dest.clear(); // üßπ –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω—É–ª—è–µ–º –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é

    if (numInputChannels >= 2 && inputChannelData[0] && inputChannelData[1])
    {
        // üéØ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Å—Ç–µ—Ä–µ–æ ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        dest.copyFrom(0, 0, inputChannelData[0], numSamples); // L
        dest.copyFrom(1, 0, inputChannelData[1], numSamples); // R
    }
    else if (numInputChannels == 1 && inputChannelData[0])
    {
        // üéØ –ú–æ–Ω–æ ‚Äî –¥—É–±–ª–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞
        dest.copyFrom(0, 0, inputChannelData[0], numSamples); // L
        dest.copyFrom(1, 0, inputChannelData[0], numSamples); // R
    }
    else
    {
        // üéØ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏—à–∏–Ω—É
        dest.clear();
    }
}


